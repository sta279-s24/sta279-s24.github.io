geom_line(lwd = 1) +
geom_point(aes(x = 0, y = 1), color = "blue", size = 3) +
geom_abline(slope = 1, intercept = 0, lty = 2, color="red",
lwd = 1) +
#geom_text() +
annotate("text", label = "Random classifier", x = 0.5, y = 0.4,
angle = 45, color = "red", size = 5) +
annotate("text", label = "Perfect \n classifier", x = 0.1, y = 0.95,
angle = 0, color = "blue", size = 5) +
geom_segment(aes(x = 0.25, y = 0.7, xend = 0.15, yend = 0.8),
arrow = arrow(length = unit(0.5, "cm")),
color = "black") +
geom_segment(aes(x = 0.29, y = 0.66, xend = 0.39, yend = 0.56),
arrow = arrow(length = unit(0.5, "cm")),
color = "black") +
annotate("text", label = "Better", x = 0.27, y = 0.8,
angle = 0, color = "black", size = 5) +
annotate("text", label = "Worse", x = 0.38, y = 0.67,
angle = 0, color = "black", size = 5) +
labs(x = "False positive rate",
y = "True positive rate", title = "ROC Curve") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("orange", "lightblue")) +
theme(text = element_text(size = 15))
dim(data_1_full)
table(knn_pred > 0.5, test_y)
(288 + 241)/717
roc_preds <- prediction(knn_pred, test_y)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
head(pca1$sdev)
head(pca1$sdev,n10)
head(pca1$sdev,10)
head(pca1$sdev,50)
selected1 <- data1[,2:291]
data1 <- data_1
selected1 <- data1[,2:291]
#data1_pca <- data.frame(pcax1, y = data1$V291)
data1_pca <- data1
train_indices <- c(1:750, (2717 - 750):3467, (5435-750):(5435+750), (8151-750):(8151+750), (10590-750):(10590+750), (13307-750):(13307+750), (16024-750):(16024+750), (18741-750):(18741+750), (21458-750):(21458+750), (24175-750):(24175+750), (26892-750):(26892+750), (20968-750):(20968+750), (32326-750):(32326+750), (35043-750):(35043+750), (37760-750):(37760+750), (40477-750):(40477+750), (43194-750):(43194+750), (45911-750):(45911+750), (48628-750):(48628+750), (51345-750):(51345+750), (54062-750):(54062+750), (56779-750):56779)
length(train_indices)
length(unique(train_indices))
table(train_indices)
c(table(train_indices))
c(table(train_indices))[c(table(train_indices)) > 1]
26892+750
24175 - 21458
26892 + 2717
train_indices <- c(1:750, (2717 - 750):3467, (5435-750):(5435+750),
(8151-750):(8151+750), (10590-750):(10590+750),
(13307-750):(13307+750),
(16024-750):(16024+750),
(18741-750):(18741+750),
(21458-750):(21458+750),
(24175-750):(24175+750), (26892-750):(26892+750),
(29609-750):(29609+750), (32326-750):(32326+750), (35043-750):(35043+750), (37760-750):(37760+750), (40477-750):(40477+750), (43194-750):(43194+750), (45911-750):(45911+750), (48628-750):(48628+750), (51345-750):(51345+750), (54062-750):(54062+750), (56779-750):56779)
length(train_indices)
length(unique(train_indices))
train_indices <- c(1:750, (2717 - 750):3467, (5435-750):(5435+750),
(8151-750):(8151+750), (10590-750):(10590+750),
(13307-750):(13307+750),
(16024-750):(16024+750),
(18741-750):(18741+750),
(21458-750):(21458+750),
(24175-750):(24175+750), (26892-750):(26892+750),
(29609-750):(29609+750), (32326-750):(32326+750), (35043-750):(35043+750), (37760-750):(37760+750), (40477-750):(40477+750), (43194-750):(43194+750), (45911-750):(45911+750), (48628-750):(48628+750), (51345-750):(51345+750), (54062-750):(54062+750), (56779-750):56779)
test_data1 <- data1_pca[-train_indices, ]
train_data1 <- data1_pca[train_indices, ]
dim(train_data)
dim(train_data1)
dim(test_data1)
31521 + 25258
dim(data1)
table(data_1$channel)[train_indices]
data_1$V291
data_1$V291[train_indices]
table(data_1$V291[train_indices])
table(data_1$V291[train_indices], data_1$channel[train_indices])
data1 <- data_1
selected1 <- data1[,2:291]
pca1 <- prcomp(selected1, scale. = TRUE)
pcax1 <- pca1$x
dim(pcax1)
data1_pca <- data.frame(pcax1, y = data1$V291)
train_indices <- c(1:750, (2717 - 750):3467, (5435-750):(5435+750),
(8151-750):(8151+750), (10590-750):(10590+750),
(13307-750):(13307+750),
(16024-750):(16024+750),
(18741-750):(18741+750),
(21458-750):(21458+750),
(24175-750):(24175+750), (26892-750):(26892+750),
(29609-750):(29609+750), (32326-750):(32326+750), (35043-750):(35043+750), (37760-750):(37760+750), (40477-750):(40477+750), (43194-750):(43194+750), (45911-750):(45911+750), (48628-750):(48628+750), (51345-750):(51345+750), (54062-750):(54062+750), (56779-750):56779)
test_data1 <- data1_pca[-train_indices, ]
train_data1 <- data1_pca[train_indices, ]
train_features1 <- train_data1[, -ncol(train_data1)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -ncol(test_data1)]
test_labels1 <- test_data1$y
knn_res <- nn2(train_features1, test_features1, k = 5)$nn.idx
knn_pred <- rep(NA, nrow(test_features1))
for(i in 1:nrow(test_features1)){
knn_pred[i] <- mean(test_labels1[knn_res[i,]])
}
length(knn_pred)
table(knn_pred > 0.5, test_features1)
length(test_features1)
table(knn_pred > 0.5, test_labels1)
knn_predictions1 <- knn(train_features1, test_features1, train_labels1, k = 5, prob = TRUE)
library(class)
knn_predictions1 <- knn(train_features1, test_features1, train_labels1, k = 5, prob = TRUE)
knn_probs <-attributes(knn_predictions1)$prob
head(knn_probs)
head(knn_pred)
table(knn_probs > 0.5, test_labels1)
?knn
length(knn_probs)
sum(knn_probs > 0.5)
head(knn_predictions1)
table(knn_predictions1)
table(knn_predictions1, test_labels1)
?write.csv
write.csv(data1_pca, "~/Documents/data1_pca.csv")
data1 <- data_1
selected1 <- data1[,2:291]
data1$channel
selected1 <- selected1[data1$channel != "F4",]
dim(selected1)
dim(data1)
pca1 <- prcomp(selected1, scale. = TRUE)
pcax1 <- pca1$x
data1_pca <- data.frame(pcax1, y = data1$V291[data1$channel != "F4"])
write.csv(data1_pca, "~/Documents/data1_pca.csv")
dim(data1_pca)
nrow(data1_pca)/21
nrow(data1_pca)/20
data1_pca$id <- rep(1:2717, 20)
head(data1_pca)
head(data1_pca$id)
?knn
train_indices <- sample(1:2717, 2000, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[test_indices, ]
train_data1 <- data1_pca[train_indices, ]
dim(train_data1)
dim(test_data1)
train_features1 <- train_data1[, -c(291, 292)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -c(291, 292)]
test_labels1 <- test_data1$y
set.seed(11)
train_indices <- sample(1:2717, 2000, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[test_indices, ]
train_data1 <- data1_pca[train_indices, ]
train_features1 <- train_data1[, -c(291, 292)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -c(291, 292)]
test_labels1 <- test_data1$y
knn_predictions1 <- knn(train_features1, test_features1, train_labels1, k = 5, prob = TRUE)
table(knn_predictions1, test_labels1)
set.seed(11)
train_indices <- sample(1:2717, 2000, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[data1_pca$id %in% test_indices, ]
train_data1 <- data1_pca[data1_pca$id %in% train_indices, ]
dim(test_data1)
dim(train_data1)
dim(data1_pca)
train_features1 <- train_data1[, -c(291, 292)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -c(291, 292)]
test_labels1 <- test_data1$y
knn_predictions1 <- knn(train_features1, test_features1, train_labels1, k = 5, prob = TRUE)
table(knn_predictions1, test_labels1)
length(test_labels1)
(6627 + 6706)/14340
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
dim(train)
head(train)
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
test
dim(test)
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
blah <- knn(train, test, cl, k = 3, prob=TRUE)
blah
test[1,]
?sweep
sweep(train, 1, test[1,]) |>
head()
sweep(train, 2, test[1,]) |>
head()
train[1,] - test[1,]
train[2,] - test[1,]
sweep(train, 2, test[1,])^2
rowSums(sweep(train, 2, test[1,])^2)
sort(dists)
dists <- rowSums(sweep(train, 2, test[1,])^2)
sort(dists)
order(dists)
which(order(dists) < 6)
dists[which(order(dists) < 6)]
sort(dists)
?which.min
sort(dists)
?sort
sort(dists, index.return=T)
sort(dists, index.return=T)$idx
sort(dists, index.return=T)$ix
sort(dists, index.return=T)$ix[1:5]
dists[sort(dists, index.return=T)$ix[1:5]]
cl[sort(dists, index.return=T)$ix[1:5]]
blah
attr(knn_predictions1, prob)
attr(knn_predictions1, "prob")
hist(attr(knn_predictions1, "prob"))
knn_probs <- attr(knn_predictions1, "prob")
knn_probs <- ifelse(knn_prediction1 == 1, knn_probs, 1-knn_probs)
knn_probs <- ifelse(knn_predictions1 == 1, knn_probs, 1-knn_probs)
hist(knn_probs)
table(knn_probs > 0.5, test_labels1)
table(knn_predictions1, test_labels1)
dists <- rowSums(sweep(train_features1, 2, test_features1[1,])^2)
dim(train_features1)
dim(test_features1)
sweep(train_features1, 2, test_features1[1,])
dists <- rowSums(sweep(as.matrix(train_features1), 2, as.matrix(test_features1)[1,])^2)
dists
sort(dists, index.return=T)$ix[1:5]
train_labels1[sort(dists, index.return=T)$ix[1:5]]
head(knn_probs)
dists <- rowSums(sweep(as.matrix(train_features1), 2, as.matrix(test_features1)[2,])^2)
train_labels1[sort(dists, index.return=T)$ix[1:5]]
which(knn_probs > 0 & knn_probs < 1)
knn_probs[16]
dists <- rowSums(sweep(as.matrix(train_features1), 2, as.matrix(test_features1)[16,])^2)
train_labels1[sort(dists, index.return=T)$ix[1:5]]
knn_probs[14137]
knn_probs[14317]
dists <- rowSums(sweep(as.matrix(train_features1), 2, as.matrix(test_features1)[14317,])^2)
train_labels1[sort(dists, index.return=T)$ix[1:5]]
test_data1$id
roc_preds <- prediction(knn_probs, test_labels1)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
head(test_data1$id)
test_data1$pred_class <- knn_predictions1
head(test_data1$pred_class)
mean(test_data1$pred_class)
head(as.numeric(test_data1$pred_class))
head(as.numeric(test_data1$pred_class) - 1)
test_data1 |>
group_by(id) |>
mutate(individual_pred = mean(as.numeric(pred_class) - 1))
test_data1 |>
group_by(id) |>
mutate(individual_pred = mean(as.numeric(pred_class) - 1)) |>
View()
test_data1 |>
group_by(id) |>
summarize(individual_pred = mean(as.numeric(pred_class) - 1),
individual_label = mean(y)) |>
View()
head(test_labels1)
indiv_results <- test_data1 |>
group_by(id) |>
summarize(individual_pred = mean(as.numeric(pred_class) - 1),
individual_label = mean(y))
table(indiv_results$individual_pred > 0.5, indiv_results$individual_label)
length(indiv_results$individual_pred)
(338 + 334)/717
roc_preds <- prediction(indiv_results$individual_pred, indiv_results$individual_label)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
?performance
colnames(selected1)
colnames(data1)
head(selected1$V291)
head(selected1$V1)
dim(selected1)
head(selected1[,291])
head(selected1[,290])
selected1 <- data1[,1:290]
colnames(selected1)
head(selected1$V1)
head(selected1$V290)
data_1 <- read.csv("~/Downloads/fulltraining_allchannels.csv")
data1 <- read.csv("~/Downloads/fulltraining_allchannels.csv")
selected1 <- data1[,1:290]
# Remove channel F4 from consideration
selected1 <- selected1[data1$channel != "F4",]
pca1 <- prcomp(selected1, scale. = TRUE)
pcax1 <- pca1$x
dim(pcax1)
data1_pca <- data.frame(pcax1, y = data1$V291[data1$channel != "F4"])
data1_pca
data1_pca$id <- rep(1:2717, 20)
# Now sample training individuals
set.seed(11)
train_indices <- sample(1:2717, 2000, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[data1_pca$id %in% test_indices, ]
train_data1 <- data1_pca[data1_pca$id %in% train_indices, ]
train_features1 <- train_data1[, -c(291, 292)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -c(291, 292)]
test_labels1 <- test_data1$y
# perform knn
knn_predictions1 <- knn(train_features1, test_features1, train_labels1, k = 5, prob = TRUE)
table(knn_predictions1, test_labels1)
(4472 + 4913)/length(train_features1)
(4472 + 4913)/length(test_labels1)
knn_probs <- attr(knn_predictions1, "prob")
# to get probabilities: the knn function returns the probability of the
# most common class for each observation (i.e., if most of the neighbors are 0, it
# will return P(0), and if most of the neighbors are 1, it will return P(1))
knn_probs <- ifelse(knn_predictions1 == 1, knn_probs, 1-knn_probs)
table(knn_probs > 0.5, test_labels1)
roc_preds <- prediction(knn_probs, test_labels1)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
dim(train_features1)
dim(test_features1)
colmeans(test_features1)
colMeans(test_features1)
head(colMeans(test_features1))
apply(test_features1, 1, sd)
head(apply(test_features1, 1, sd))
test_data1$pred_class <- knn_predictions1
indiv_results <- test_data1 |>
group_by(id) |>
summarize(individual_pred = mean(as.numeric(pred_class) - 1),
individual_label = mean(y))
table(indiv_results$individual_pred > 0.5, indiv_results$individual_label)
length(indiv_results$individual_label)
249 + 259 + 113 + 96
(249 + 259)/717
roc_preds <- prediction(indiv_results$individual_pred, indiv_results$individual_label)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
?scale
pcax1 <- scale(pcax1)
mean(pcax1[,1])
sd(pcax1[,1])
# add labels and individual IDs
data1_pca <- data.frame(pcax1, y = data1$V291[data1$channel != "F4"])
data1_pca$id <- rep(1:2717, 20)
# Now sample training individuals
set.seed(11)
train_indices <- sample(1:2717, 2000, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[data1_pca$id %in% test_indices, ]
train_data1 <- data1_pca[data1_pca$id %in% train_indices, ]
train_features1 <- train_data1[, -c(291, 292)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -c(291, 292)]
test_labels1 <- test_data1$y
View(train_features1)
# perform knn
knn_predictions1 <- knn(train_features1, test_features1, train_labels1, k = 20, prob = TRUE)
knn_probs <- attr(knn_predictions1, "prob")
# to get probabilities: the knn function returns the probability of the
# most common class for each observation (i.e., if most of the neighbors are 0, it
# will return P(0), and if most of the neighbors are 1, it will return P(1))
knn_probs <- ifelse(knn_predictions1 == 1, knn_probs, 1-knn_probs)
table(knn_predictions1, test_labels1)
table(knn_probs > 0.5, test_labels1)
roc_preds <- prediction(knn_probs, test_labels1)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
test_data1$pred_class <- knn_predictions1
indiv_results <- test_data1 |>
group_by(id) |>
summarize(individual_pred = mean(as.numeric(pred_class) - 1),
individual_label = mean(y))
table(indiv_results$individual_pred > 0.5, indiv_results$individual_label)
(241 + 212)/717
# perform knn
knn_predictions1 <- knn(train_features1, test_features1, train_labels1, k = 10, prob = TRUE)
knn_probs <- attr(knn_predictions1, "prob")
# to get probabilities: the knn function returns the probability of the
# most common class for each observation (i.e., if most of the neighbors are 0, it
# will return P(0), and if most of the neighbors are 1, it will return P(1))
knn_probs <- ifelse(knn_predictions1 == 1, knn_probs, 1-knn_probs)
table(knn_predictions1, test_labels1)
table(knn_probs > 0.5, test_labels1)
roc_preds <- prediction(knn_probs, test_labels1)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
test_data1$pred_class <- knn_predictions1
indiv_results <- test_data1 |>
group_by(id) |>
summarize(individual_pred = mean(as.numeric(pred_class) - 1),
individual_label = mean(y))
table(indiv_results$individual_pred > 0.5, indiv_results$individual_label)
roc_preds <- prediction(indiv_results$individual_pred, indiv_results$individual_label)
roc_perf <- performance(roc_preds, "tpr", "fpr")
plot(roc_perf)
train_data1
data_2 <- train_data1[,-id]
data_2 <- train_data1[,-c(id)]
dim(train_data1)
data_2 <- train_data1[,-292]
data_2
rf_model2 <- randomForest(y ~ ., data = data_2, ntree = 500,
proximity = T, keep.inbag = T)
data_2$y <- as.factor(data_2$y)
rf_model2 <- randomForest(y ~ ., data = data_2, ntree = 500,
proximity = T, keep.inbag = T)
colnames(data1)
head(data1$V1)
head(data1$V291)
View(data1)
View(train_data1)
dim(pcax1)
?write.csv
write.csv(data1_pca, "~/Documents/data1_pca.csv", row.names=F)
set.seed(11)
train_indices <- sample(1:2717, 100, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[data1_pca$id %in% test_indices, ]
train_data1 <- data1_pca[data1_pca$id %in% train_indices, ]
dim(test_data1)
dim(train_data1)
View(train_data1)
data_2 <- train_data1 |>
dplyr::mutate(y = as.factor(y))
dim(data_2)
data_2 <- train_data1 |>
dplyr::mutate(y = as.factor(y)) |>
select(-id)
dim(data_2)
colnames(data_2)
library(randomForest)
rf_model2 <- randomForest(y ~ ., data = data_2, ntree = 100,
proximity = T, keep.inbag = T)
rf_predictions2 <- predict(rf_model2, test_data1, type="prob")
table(rf_predictions2[,2] > 0.5, test_data1$y)
class(data_2$y)
(13500 + 21025)/length(rf_predictions2)
(21025 + 13500)/(21025 + 13500 + 12560 + 5255)
rf_model2 <- randomForest(y ~ ., data = data_2, ntree = 300,
proximity = T, keep.inbag = T)
rf_predictions2 <- predict(rf_model2, test_data1, type="prob")
table(rf_predictions2[,2] > 0.5, test_data1$y)
set.seed(11)
train_indices <- sample(1:2717, 500, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[data1_pca$id %in% test_indices, ]
train_data1 <- data1_pca[data1_pca$id %in% train_indices, ]
train_features1 <- train_data1[, -c(291, 292)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -c(291, 292)]
test_labels1 <- test_data1$y
data_2 <- train_data1 |>
dplyr::mutate(y = as.factor(y)) |>
select(-id)
rf_model2 <- randomForest(y ~ ., data = data_2, ntree = 300,
proximity = T, keep.inbag = T)
rf_predictions2 <- predict(rf_model2, test_data1, type="prob")
table(rf_predictions2[,2] > 0.5, test_data1$y)
mat <- table(rf_predictions2[,2] > 0.5, test_data1$y)
sum(diag(mat))/sum(mat)
set.seed(11)
train_indices <- sample(1:2717, 1000, replace=F)
test_indices <- setdiff(1:2717, train_indices)
test_data1 <- data1_pca[data1_pca$id %in% test_indices, ]
train_data1 <- data1_pca[data1_pca$id %in% train_indices, ]
train_features1 <- train_data1[, -c(291, 292)]
train_labels1 <- train_data1$y
test_features1 <- test_data1[, -c(291, 292)]
test_labels1 <- test_data1$y
data_2 <- train_data1 |>
dplyr::mutate(y = as.factor(y)) |>
select(-id)
rf_model2 <- randomForest(y ~ ., data = data_2, ntree = 300,
proximity = T, keep.inbag = T)
rf_predictions2 <- predict(rf_model2, test_data1, type="prob")
table(rf_predictions2[,2] > 0.5, test_data1$y)
mat <- table(rf_predictions2[,2] > 0.5, test_data1$y)
sum(diag(mat))/sum(mat)
test_data1$pred_class <- rf_predictions2[,2] > 0.5
indiv_results <- test_data1 |>
group_by(id) |>
summarize(individual_pred = mean(as.numeric(pred_class) - 1),
individual_label = mean(y))
table(indiv_results$individual_pred > 0.5, indiv_results$individual_label)
rf_predictions2[,2] > 0.5
lenght(rf_predictions2[,2] > 0.5)
length(rf_predictions2[,2] > 0.5)
dim(test_data1)
head(test_data1$pred_class)
table(test_data1$pred_class)
indiv_results <- test_data1 |>
group_by(id) |>
summarize(individual_pred = mean(as.numeric(pred_class)),
individual_label = mean(y))
table(indiv_results$individual_pred > 0.5, indiv_results$individual_label)
sum(diag(mat))/sum(mat)
mat <- table(indiv_results$individual_pred > 0.5, indiv_results$individual_label)
sum(diag(mat))/sum(mat)
?pivot_wider
reticulate::repl_python()
x <- c(1, 5, 9)
x[2]
x[1:2]
x <- c(1, 5, 9)
x[2] # select the second entry
x[1:2] # select the first and second entries
x[c(1, 3)] # select the first and third entries
reticulate::repl_python()
