} else {
mu <- exp(X %*% beta)
deviance <- 2*(sum(dpois(y, y, log=T)) - sum(dpois(y, mu, log=T)))
}
return(deviance)
}
fisher_scoring <- function(X, y, family, max_iter = 100){
init_mean <- mean(y)
if(family == "binomial"){
beta <- c(log(init_mean/(1 - init_mean)), rep(0, ncol(X) - 1))
} else {
beta <- c(log(init_mean), rep(0, ncol(X) - 1))
}
iter <- 0
cur_dev <- deviance(X, y, beta, family)
dev_diff <- 1
while(iter < max_iter & dev_diff > 0.001){
beta <- beta + solve(I(X, beta, family)) %*% U(X, y, beta, family)
new_dev <- deviance(X, y, beta, family)
dev_diff <- abs(new_dev - cur_dev)
cur_dev <- new_dev
iter <- iter + 1
}
return(list("Iterations" = iter, "coefficients" = beta))
}
my_glm_1 <- function(X, y, family, max_iter = 50){
if(family == "gaussian"){
n <- nrow(X)
p <- ncol(X)
beta <- solve(t(X) %*% X) %*% t(X) %*% y
iter <- 1
se <- sqrt(diag(sum((y - X %*% beta)^2)/(n - p) * solve(t(X) %*% X)))
coefs <- data.frame(beta = beta,
se = se,
t_score = beta/se,
p_value = 2*pt(abs(beta/se), n-p,
lower.tail = F))
} else {
output <- fisher_scoring(X, y, family, max_iter)
beta <- output$coefficients
iter <- output$Iterations
se <- sqrt(diag(solve(I(X, beta, family))))
coefs <- data.frame(beta = beta,
se = se,
z_score = beta/se,
p_value = 2*pnorm(abs(beta/se),
lower.tail = F))
}
row.names(coefs)[1] <- "(Intercept)"
return(list("coefficients" = coefs,
"iterations" = iter,
"family" = family,
"deviance" = deviance(X, y, beta, family)))
}
my_glm <- function(formula, family, data, max_iter = 50){
y <- data[[deparse(formula[[2]])]]
X <- cbind(1, as.matrix(data[all.vars(formula[[3]])]))
return(my_glm_1(X, y, family, max_iter))
}
# Simulate some data
set.seed(279)
n <- 100
x1 <- runif(n)
x2 <- rnorm(n)
y <- rnorm(n, 1 + x1 + x2, 2)
# create the data
df <- data.frame(y, x1, x2)
# fit the model
m1 <- my_glm(y ~ x1 + x2, family = "gaussian", data = df)
# model output
m1$coefficients
m1$iterations
m1$family
m1$deviance
library(palmerpenguins)
library(tidyverse)
df <- penguins |>
drop_na()
m1 <- my_glm(body_mass_g ~ flipper_length_mm + bill_length_mm,
family = "gaussian", data = df)
m1$coefficients
m1$iterations
m1$family
m1$deviance
df <- penguins |>
drop_na() |>
mutate(sex = ifelse(sex == "female", 1, 0))
m1 <- my_glm(sex ~ flipper_length_mm + bill_length_mm,
family = "binomial", data = df)
m1$coefficients
m1$iterations
m1$family
m1$deviance
glm(sex ~ flipper_length_mm + bill_length_mm,
family = "binomial", data = df)
# simulate some data
set.seed(214)
n <- 300
x1 <- rbinom(n, 1, 0.5)
x2 <- runif(n)
x3 <- runif(n)
y <- rpois(n, exp(0.5 - x1 + x2 - 0.5*x3))
df <- data.frame(y, x1, x2, x3)
# fit the model
m1 <- my_glm(y ~ x1 + x2, family = "poisson", data = df)
# model output
m1$coefficients
m1$iterations
m1$family
m1$deviance
# fit the model
m1 <- my_glm(y ~ x1 + x2 + x3, family = "poisson", data = df)
# model output
m1$coefficients
glm(y ~ x1 + x2 + x3, family = "poisson", data = df)
40/43
35/43
550 + 350 + 75 + 850 + 3600
350/8
70*8
vcov(m1)
set.seed(11)
n <- 100
beta <- c(-1, 1)
x <- rnorm(n)
X <- cbind(1, x)
p <- c(exp(X %*% beta)/(1 + exp(X %*% beta)))
y <- rbinom(n, 1, p)
m1 <- glm(y ~ x, family = binomial)
summary(m1)$coefficients
vcov(m1)
phat <- c(X %*% coef(m1))
solve(t(X) %*% diag(phat*(1-phat)) %*% X)
vcov(m1)
phat <- c(exp(X %*% coef(m1))/(1 + exp(X %*% coef(m1))))
solve(t(X) %*% diag(phat*(1-phat)) %*% X)
solve(t(X) %*% diag(phat*(1-phat)) %*% X)[2,2]
nsim <- 5000
slope_estimates <- rep(NA, nsim)
for(i in 1:nsim){
y <- rbinom(n, 1, p)
m1 <- glm(y ~ x, family = binomial)
slope_estimates[i] <- m1$coefficients[2]
}
qqnorm(slope_estimates)
qqline(slope_estimates)
mean(slope_estimates)
var(slope_estimates)
solve(t(X) %*% diag(p*(1-p)) %*% X)[2,2]
n <- 50
x <- rnorm(n)
X <- cbind(1, x)
p <- c(exp(X %*% beta)/(1 + exp(X %*% beta)))
slope_estimates <- rep(NA, nsim)
for(i in 1:nsim){
y <- rbinom(n, 1, p)
m1 <- glm(y ~ x, family = binomial)
slope_estimates[i] <- m1$coefficients[2]
}
qqnorm(slope_estimates)
qqline(slope_estimates)
var(slope_estimates)
solve(t(X) %*% diag(p*(1-p)) %*% X)[2,2]
n <- 500
x <- rnorm(n)
X <- cbind(1, x)
p <- c(exp(X %*% beta)/(1 + exp(X %*% beta)))
slope_estimates <- rep(NA, nsim)
for(i in 1:nsim){
y <- rbinom(n, 1, p)
m1 <- glm(y ~ x, family = binomial)
slope_estimates[i] <- m1$coefficients[2]
}
qqnorm(slope_estimates)
qqline(slope_estimates)
var(slope_estimates)
solve(t(X) %*% diag(p*(1-p)) %*% X)[2,2]
n <- 100
slope_estimates <- rep(NA, nsim)
for(i in 1:nsim){
x <- rnorm(n)
X <- cbind(1, x)
p <- c(exp(X %*% beta)/(1 + exp(X %*% beta)))
y <- rbinom(n, 1, p)
m1 <- glm(y ~ x, family = binomial)
slope_estimates[i] <- m1$coefficients[2]
}
qqnorm(slope_estimates)
qqline(slope_estimates)
var(slope_estimates)
m <- 100000
beta <- c(-1, 1)
x <- rnorm(m)
X <- cbind(1, x)
p <- c(exp(X %*% beta)/(1 + exp(X %*% beta)))
V <- matrix(c(mean(p*(1-p)), mean(p*(1-p)*x),
mean(p*(1-p)*x), mean(p*(1-p)*x^2)),
nrow = 2)
solve(V)/n
var(slope_estimates)
m <- 100000
beta <- c(-1, 1)
x <- rnorm(m)
X <- cbind(1, x)
p <- c(exp(X %*% beta)/(1 + exp(X %*% beta)))
V <- matrix(c(mean(p*(1-p)), mean(p*(1-p)*x),
mean(p*(1-p)*x), mean(p*(1-p)*x^2)),
nrow = 2)
(solve(V)/n)[2,2]
nsim <- 5000
n <- 100
beta <- c(-1, 0, 0)
test_stats <- rep(NA, nsim)
for(i in 1:nsim){
x1 <- rnorm(n)
x2 <- rnorm(n)
X <- cbind(1, x1, x2)
p <- exp(X %*% beta)/(1 + exp(X %*% beta))
y <- rbinom(n, 1, p)
m1 <- glm(y ~ x1 + x2, family = binomial)
test_stats[i] <- m1$null.deviance - m1$deviance
}
qqplot(rchisq(nsim, 2), test_stats)
abline(a=0, b=1)
n <- 10
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.1
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
mean(abs(res - 0.5) < eps)
n <- 50
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.1
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
mean(abs(res - 0.5) < eps)
n <- 50
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
mean(abs(res - 0.5) < eps)
n <- 10
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
mean(abs(res - 0.5) < eps)
n <- 100
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
mean(abs(res - 0.5) < eps)
ns <- c(10, 20, 50, 100, 250, 500)
res <- rep(NA, length(ns))
for(i in 1:length(ns)){
means <- rep(NA, nsim)
n <- ns[i]
for(j in 1:nsim){
x <- runif(n)
means[j] <- mean(x)
}
res[i] <- mean(abs(res - 0.5) < eps)
}
plot(ns, res)
res
ns <- c(10, 20, 50, 100, 250, 500)
res <- rep(NA, length(ns))
for(i in 1:length(ns)){
means <- rep(NA, nsim)
n <- ns[i]
for(j in 1:nsim){
x <- runif(n)
means[j] <- mean(x)
}
res[i] <- mean(abs(means - 0.5) < eps)
}
plot(ns, res)
eps <- 0.03
ns <- c(10, 20, 50, 100, 250, 500)
res <- rep(NA, length(ns))
for(i in 1:length(ns)){
means <- rep(NA, nsim)
n <- ns[i]
for(j in 1:nsim){
x <- runif(n)
means[j] <- mean(x)
}
res[i] <- mean(abs(means - 0.5) < eps)
}
plot(ns, res)
n <- 100
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
cdf_pts <- seq(-4, 4, 0.01)
ecdf(res)(cdf_pts)
plot(cdf_pts, ecdf(res)(cdf_pts))
cdf_pts <- seq(0, 1, 0.01)
plot(cdf_pts, ecdf(res)(cdf_pts))
cdf_pts <- seq(0.3, 0.7, 0.01)
plot(cdf_pts, ecdf(res)(cdf_pts))
points(cdf_pts, dnorm(cdf_pts, mean=0.5, sd=sqrt(1/(12*n))), type="l")
cdf_pts <- seq(0.3, 0.7, 0.01)
plot(cdf_pts, ecdf(res)(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0.5, sd=sqrt(1/(12*n))), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0.5, sd=sqrt(1/(12*n))), type="l", col="red")
n <- 10
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
cdf_pts <- seq(0.3, 0.7, 0.01)
plot(cdf_pts, ecdf(res)(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0.5, sd=sqrt(1/(12*n))), type="l", col="red")
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (res - 0.5) * 12)(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
plot(cdf_pts, ecdf(sqrt(n) * (res - 0.5) * sqrt(12))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
n <- 5
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (res - 0.5) * sqrt(12))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
n <- 2
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (res - 0.5) * sqrt(12))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
n <- 1
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
x <- runif(n)
res[i] <- mean(x)
}
hist(res)
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (res - 0.5) * sqrt(12))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
n <- 1
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
#x <- runif(n)
x <- rexp(n)
res[i] <- mean(x)
}
hist(res)
n <- 1
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
#x <- runif(n)
x <- rpois(n, 1)
res[i] <- mean(x)
}
hist(res)
#plot(cdf_pts, ecdf(sqrt(n) * (res - 0.5) * sqrt(12))(cdf_pts), type="l")
plot(cdf_pts, ecdf(sqrt(n) * (res - 1))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
n <- 10
nsim <- 10000
res <- rep(NA, nsim)
eps <- 0.01
for(i in 1:nsim){
#x <- runif(n)
x <- rpois(n, 1)
res[i] <- mean(x)
}
hist(res)
cdf_pts <- seq(-4, 4, 0.01)
#plot(cdf_pts, ecdf(sqrt(n) * (res - 0.5) * sqrt(12))(cdf_pts), type="l")
plot(cdf_pts, ecdf(sqrt(n) * (res - 1))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
eps <- 0.03
ns <- c(10, 20, 50, 100, 250, 500)
res <- rep(NA, length(ns))
for(i in 1:length(ns)){
maxs <- rep(NA, nsim)
n <- ns[i]
for(j in 1:nsim){
x <- runif(n)
maxs[j] <- max(x)
}
res[i] <- mean(abs(means - 1) < eps)
}
plot(ns, res)
eps <- 0.03
ns <- c(10, 20, 50, 100, 250, 500)
res <- rep(NA, length(ns))
for(i in 1:length(ns)){
maxs <- rep(NA, nsim)
n <- ns[i]
for(j in 1:nsim){
x <- runif(n)
maxs[j] <- max(x)
}
res[i] <- mean(abs(maxs - 1) < eps)
}
plot(ns, res)
reticulate::repl_python()
n <- 20
nsim <- 1000
means <- rep(NA, nsim)
for(j in 1:nsim){
x <- runif(n)
means[j] <- mean(x)
}
hist(means)
n <- 5
nsim <- 1000
means <- rep(NA, nsim)
for(i in 1:nsim){
x <- rpois(n, 1)
means[i] <- mean(x)
}
hist(means)
cdf_pts <- seq(-4, 4, 0.01)
n <- 5
nsim <- 1000
means <- rep(NA, nsim)
for(i in 1:nsim){
x <- rpois(n, 1)
means[i] <- mean(x)
}
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (means - 1) / sqrt(1))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
plot(cdf_pts, ecdf(sqrt(n) * (means - 1) / sqrt(1))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (means - 1) / sqrt(1))(cdf_pts), type="l")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (means - 1) / sqrt(1))(cdf_pts), type="l",
xlab = "x", ylab = "CDF")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
n <- 3
nsim <- 1000
means <- rep(NA, nsim)
for(i in 1:nsim){
x <- rpois(n, 1)
means[i] <- mean(x)
}
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (means - 1) / sqrt(1))(cdf_pts), type="l",
xlab = "x", ylab = "CDF")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
n <- 2
nsim <- 1000
means <- rep(NA, nsim)
for(i in 1:nsim){
x <- rpois(n, 1)
means[i] <- mean(x)
}
cdf_pts <- seq(-4, 4, 0.01)
plot(cdf_pts, ecdf(sqrt(n) * (means - 1) / sqrt(1))(cdf_pts), type="l",
xlab = "x", ylab = "CDF")
points(cdf_pts, pnorm(cdf_pts, mean=0, sd=1), type="l", col="red")
reticulate::repl_python()
?multinom
reticulate::repl_python()
reticulate::repl_python()
