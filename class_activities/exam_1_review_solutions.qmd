---
title: "Exam 1 review solutions"
format: html
editor: visual
author: "Ciaran Evans"
---

1.  

```{r}
output <- rep(NA, 10)
for(i in 1:5){
  output[i] <- i
}

output[6]
```

2.  

```{r}
output <- rep(0, 10)
for(i in 1:10){
  output[i] <- i
}

output[6]
```

3.  

```{r}
output <- rep(0, 10)
for(i in 1:10){
  output[i] <- i
}

output[11]
```

4.  

```{r}
output <- rep(1, 10)
for(i in 2:10){
  output[i] <- i + output[i-1]
}

output[5]
```

5.  

```{r}
output <- rep(1, 10)
for(i in 2:10){
  output[i] <- i + output[i+1]
}

output[5]
```

6.  

```{r}
x <- 10
test_fun <- function(x = 11){
  return(x)
}
test_fun()
x
```

7.  

```{r}
x <- 10
test_fun <- function(y = 11){
  return(x + 1)
}
test_fun()
x
```

8.  

```{r}
x <- 10
test_fun <- function(y = 11){
  x <- x + 1
  return(x + 1)
}
test_fun()
x
```

9.  

```{r}
x <- 10
test_fun <- function(x = 11){
  x <- x + 1
  return(x + 1)
}
test_fun()
x
```

10. 

```{r}
x <- 10
test_fun <- function(x = 11){
  x <- x + 1
  return(x + 1)
}
x <- test_fun(x)
x
```

## Practice with functions

The *sample standard deviation* of numbers $x_1,...,x_n$ is given by

$$\widehat{\sigma}^2 = \frac{1}{n-1}\sum \limits_{i=1}^n (x_i - \bar{x})^2,$$

where $\bar{x} = \frac{1}{n} \sum \limits_{i=1}^n x_i$.

11. 

```{r}
my_sd <- function(x){
  n <- length(x)
  if(n == 1){
    return(0)
  } else {
    return(sqrt(1/(n-1) * sum((x - mean(x))^2)))
  }
}

# checking that it works
my_sd(c(1,2,4))
sd(c(1,2,4))
```

12. 

```{python}
import numpy as np

def my_sd(x):
  n = len(x)
  if(n == 1):
    return(0)
  else:
    return(np.sqrt( 1.0/(n-1) * np.sum((x - np.mean(x))**2) ))

my_sd(np.array([1,2,4]))
```

The $\ell_p$ norm of a vector $x = (x_1,...,x_k)$ is given by

$$||x||_p = \left( \sum \limits_{i=1}^k |x_i|^p \right)^{1/p}$$

13. Write a function called `p_norm` in R, which takes two inputs: a vector `x`, and `p`, and returns $\ell_p(x)$. Make `p = 2` the default value (this corresponds to the usual Euclidean norm).

```{r}
p_norm <- function(x, p=2){
  return((sum(abs(x)^p))^(1/p))
}

p_norm(c(1, 1, 1)) # = sqrt(3)
p_norm(c(1, 2, 3), 1) # = 6
```

14. 

```{python}
def p_norm(x, p=2):
  return(np.sum(np.abs(x)**p)**(1.0/p))

p_norm([1, 1, 1])
p_norm([1, 2, 3], 1)
```

## Practice with lists

15. Create a list `x` in R such that:

-   `x[[1]]` returns the function `mean`
-   `x[[2]]` returns the function `sd`
-   `x[[3]][[1]]` returns the vector `c(0, 1, 2)`
-   `x[[3]][[2]]` returns an anonymous function which calculates the cube root of a vector

```{r}
x <- list(mean, sd, list(c(0, 1, 2), function(x){return(x^(1/3))}))
```

## Practice with probability simulations

Three players enter a room and a red or blue hat is placed on each person's head. The color of each hat is determined by \[an independent\] coin toss (so, any combination of red and blue hats is possible). No communication of any sort is allowed, except for an initial strategy session before the game begins. Once they have had a chance to look at the other hats \[but not their own\], the players must *simultaneously* guess the color of their own hats or pass. The players win the game if at least one person guesses correctly, and no one guesses incorrectly.

16. Here is one strategy: one player randomly guesses the color of their hat, while the other two players pass. Write a simulation to estimate the probability the players win the game (the true probability is 1/2).

```{r}
set.seed(91)

nsim <- 1000
results <- rep(NA, nsim)
for(i in 1:nsim){
  hats <- sample(c("red", "blue"), 3, replace=T)
  guesses <- c(sample(c("red", "blue"), 1), "pass", "pass")
  results[i] <- guesses[1] == hats[1]
}

mean(results)
```

17. Here is another strategy: if a player sees the same color on the other two hats, they guess the color they do not see. If a player sees different colors on the other two hats, they pass. For example: If players A, B, and C have hats red, blue, and blue respectively, then player A would guess red, player B would pass, and player C would pass. Write a simulation to estimate the probability the players win the game with this new strategy (the true probability is 3/4).

**Note:** For the exam, I am more interested in the logic of how you approach the simulation, than in your code syntax being perfect. Your code should be mostly correct, but a few minor errors isn't an issue.

```{r}
nsim <- 1000
results <- rep(NA, nsim)
for(i in 1:nsim){
  hats <- sample(c("red", "blue"), 3, replace=T)
  guesses <- rep(NA, 3)
  for(j in 1:3){
    if(length(unique(hats[-j])) == 1){
      guesses[j] <- ifelse(unique(hats[-j]) == "red", "blue", "red")
    } else {
      guesses[j] <- "pass"
    }
  }
  
  results[i] <- sum(guesses[guesses != "pass"] == hats[guesses != "pass"]) == 
    length(guesses[guesses != "pass"])
}

mean(results)
```


19. 

```{r message=F, warning=F}
library(tidyverse)
library(palmerpenguins)

sub_data <- penguins |>
  slice_sample(n=10) |>
  select(species, island, bill_length_mm, bill_depth_mm)
```

```{r}
sub_data

sub_data |>
  count(species, island)
```

```{python}
import pandas as pd

sub_data = r.sub_data
(sub_data.groupby(by = ['species', 'island'])
         .agg(n = ('bill_length_mm', 'count')))
```

20.

```{r}
sub_data |>
  group_by(island, species) |>
  summarize(mean_length = mean(bill_length_mm, na.rm=T))
```

```{python}
(sub_data.groupby(by = ['island', 'species'])
         .agg(mean = ('bill_length_mm', 'mean'))
         .reset_index()
         .dropna())
```

21.

```{r}
sub_data |>
  mutate(bill_ratio = bill_length_mm/bill_depth_mm)
```

```{python}
sub_data.assign(bill_ratio = sub_data['bill_length_mm']/sub_data['bill_depth_mm'])
```

22.

```{r}
sub_data |>
  filter(species == "Adelie", 
         island == "Dream")
```

```{python}
sub_data.query('species == "Adelie" & island == "Dream"')
```
