---
title: "Homework 1 solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

Total: 32 pts

**General grading notes:** 

* They will write code in many different ways. As long as it works, they can receive credit for the question. If it doesn't work, but they made a reasonable attempt (at least some of the code has the right idea) then they receive partial credit.
* If code is written particularly inefficiently, you don't need to take off points, but you can leave a comment on how to write it more simply

#### Commenting code (2 pts)

If they made a reasonable effort to comment code on at least some of the questions (particularly the robot battle), then they get the 2 pts for the assignment. Otherwise, they do not receive the 2 pts.

#### Setting a seed (2 pts)

They get the 2 pts if they set a seed at some point before the robot battle simulation. Otherwise, they do not receive the 2 pts.

#### Naming (2 pts)

Check that they used reasonable variable names on the assignment. If the names are generally terrible (e.g., `blah1` and `blah2` instead of `robotA` and `robotB`), they lose these 2 pts.

#### Question 1 (2 pts)

```{r}
x <- seq(from=0, to=1, by=0.1)
cube_root_x <- rep(0, length(x))
for(i in 1:length(x)){
  cube_root_x[i] <- x[i]^(1/3)
}
cube_root_x
```

**Note:** the exponent needs to be in parentheses! E.g. `5^1/3` is not the same as `5^(1/3)`

**Grading:** 

* Lose 1 pt if they have `x[i]^1/3` (or something close) instead of `x[i]^(1/3)`
* Lose 2 pts if they don't have anything that looks like a cube root

#### Question 2 (2 pts)

```{r}
x <- seq(from=0, to=2, by=0.05)
cube_root_x <- rep(0, length(x))
for(i in 1:length(x)){
  cube_root_x[i] <- x[i]^(1/3)
}
cube_root_x
```
**Grading:** All they have to do is change `x` to be from 0 to 2, in increments of 0.05. Lose 2 pts if they don't have this change.

#### Question 3 (2 pts)

```{r}
x <- seq(from=0, to=1, by=0.1)
cube_root_x <- x^(1/3)
cube_root_x
```

**Grading:**

* Lose 1 pt if they have `x[i]^1/3` (or something close) instead of `x[i]^(1/3)`
* Lose 2 pts if they don't have anything that looks like a cube root
* They have to use the vectorization here. If they use a for loop, lose 2 pts

#### Question 4 (2 pts)

```{r}
n <- 1000
normal_sample <- rep(NA, n)
for(i in 1:n){
  normal_sample[i] <- rnorm(n=1, mean=0, sd=1)
}
hist(normal_sample)
```

**Grading:**

* Lose 1 pts if they use the wrong sample size in the `rnorm` function
* Lose 2 pts if they don't use the `rnorm` function at all

#### Question 5 (2 pts)

```{r}
normal_sample <- rnorm(1000)
hist(normal_sample)
```

**Grading:**

* Lose 1 pts if they use the wrong sample size in the `rnorm` function
* Lose 2 pts if they don't use the `rnorm` function at all
* Lose 2 pts if they use a loop

#### Questions 6 (5 pts)

There are two different ways you could approach the problem here (the wording of the problem is slightly ambiguous). *I am fine with either approach*. 

The simpler approach is to have the robots pull simultaneously, in which case the game is fair (each robot wins 50% of the time):

```{r}
# set a seed for reproducibility
set.seed(321)

nsim <- 1000 # number of games
results <- rep(NA, nsim)

for(i in 1:nsim){
  # each game starts with the marker in the middle
  marker <- 0
  
  # play until the marker crosses 0.5 or -0.5
  while(abs(marker) < 0.5){
    robotA <- runif(1, 0, 0.5)
    robotB <- runif(1, 0, 0.5)
    marker <- marker + robotA - robotB
  }
  
  # check whether robot A wins
  results[i] <- marker >= 0.5
}

# fraction of the time that robot A wins
mean(results)
```

The slightly more complicated approach is to have the robots take *turns* pulling, and update the marker each time. Now there is a distinct advantage to robot A for pulling first:

```{r}
# set a seed for reproducibility
set.seed(321)

nsim <- 1000 # number of games
results <- rep(NA, nsim)

for(i in 1:nsim){
  # each game starts with the marker in the middle
  marker <- 0
  
  # first robot to pull is robot A
  current_robot <- "A"
  
  # play until the marker crosses 0.5 or -0.5
  while(abs(marker) < 0.5){
    pull <- runif(1, 0, 0.5)
    
    # movement depends on whether current robot is A or B
    marker <- ifelse(current_robot == "A", marker + pull, marker - pull)
    
    # switch robot for the next pull
    current_robot <- ifelse(current_robot == "A", "B", "A")
  }
  results[i] <- marker >= 0.5
}

# fraction of the time that robot A wins
mean(results)
```


**Grading:** 

* Lose 2 pts if they don't repeat the simulation many times (for loop)
* Lose 2 pts if they don't have the robots pull until the marker crosses 0.5 or -0.5
* Lose 1 pt if the robot strengths aren't sampled from a uniform
* Lose 1 pt for minor errors

#### Question 7 (2 pts)

In the first interpretation, the game is fair (and nothing needs to be done to make it more fair). In the second interpretation, the game is decidedly unfair, but could be made more fair by adjusting the starting position of the marker, or the strength with which robot B pulls.

**Grading:** Lose 1 pt for incorrect interpretation (if they have a probability very close to 50%, it is likely fair; we just won't see exactly 50% in a finite number of trials). Lose 2 pts for no interpretation.

#### Question 8 (2 pts)

Uses for simulation studies include assessing the importance of assumptions, comparing different statistical methods, power calculations, and verifying the theoretical properties of a method (among others).

**Grading:** Just looking for at least two potential reasons here. Valid reasons beyond what I have listed are also acceptable. Lose 1 pt if only one reason.

#### Question 9 (3 pts)

* **Aims:** the goal of the simulation study
* **Data generation:** how the data were simulated
* **Estimand/target:** what we are estimating for each simulated dataset
* **Methods:** the methods we use for model fitting, estimation, etc.
* **Performance measures:** how we measure and compare the performance of our chosen methods

**Grading:** Lose 1 pt if one or two parts are incorrect. Lose 2 pts if 3 or 4 parts are incorrect.

#### Question 10 (2 pts)

The warning arises because we are trying to compare two vectors of different lengths, *and the length of the longer vector is not a multiple of the length of the shorter vector*. 

R can be counter-intuitive with how it compares vectors:

* If `x` and `y` have the same length, `x == y` will compare the corresponding elements
* If `x` and `y` have different lengths, then R will (try) to repeat the shorter vector until it has the same length as the longer vector. Thus, when the lengths don't divide, R gives us a warning

**Grading:** Full credit as long as they say that the warning arises because R is trying to compare two vectors of different lengths, and the lengths are not divisible

#### Question 11 (2 pts)

The warning goes away because 10 is now a multiple of 2. But, the comparison doesn't make a huge amount of sense.

**Grading:** Full credit as long as they say that 10 is a multiple of 2.

