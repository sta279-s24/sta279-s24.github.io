---
title: "Homework 1 solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

#### Question 1

```{r}
x <- seq(from=0, to=1, by=0.1)
cube_root_x <- rep(0, length(x))
for(i in 1:length(x)){
  cube_root_x[i] <- x[i]^(1/3)
}
cube_root_x
```

**Note:** the exponent needs to be in parentheses! E.g. `5^1/3` is not the same as `5^(1/3)`

#### Question 2

```{r}
x <- seq(from=0, to=2, by=0.05)
cube_root_x <- rep(0, length(x))
for(i in 1:length(x)){
  cube_root_x[i] <- x[i]^(1/3)
}
cube_root_x
```

#### Question 3

```{r}
x <- seq(from=0, to=1, by=0.1)
cube_root_x <- x^(1/3)
cube_root_x
```

#### Question 4

```{r}
n <- 1000
normal_sample <- rep(NA, n)
for(i in 1:n){
  normal_sample[i] <- rnorm(n=1, mean=0, sd=1)
}
hist(normal_sample)
```

#### Question 5

```{r}
normal_sample <- rnorm(1000)
hist(normal_sample)
```



#### Questions 6 and 7
There are two different ways you could approach the problem here (the wording of the problem is slightly ambiguous). *I am fine with either approach*. 

The simpler approach is to have the robots pull simultaneously, in which case the game is fair (each robot wins 50% of the time):

```{r}
# set a seed for reproducibility
set.seed(321)

nsim <- 1000 # number of games
results <- rep(NA, nsim)

for(i in 1:nsim){
  # each game starts with the marker in the middle
  marker <- 0
  
  # play until the marker crosses 0.5 or -0.5
  while(abs(marker) < 0.5){
    robotA <- runif(1, 0, 0.5)
    robotB <- runif(1, 0, 0.5)
    marker <- marker + robotA - robotB
  }
  
  # check whether robot A wins
  results[i] <- marker >= 0.5
}

# fraction of the time that robot A wins
mean(results)
```

The slightly more complicated approach is to have the robots take *turns* pulling, and update the marker each time. Now there is a distinct advantage to robot A for pulling first:

```{r}
# set a seed for reproducibility
set.seed(321)

nsim <- 1000 # number of games
results <- rep(NA, nsim)

for(i in 1:nsim){
  # each game starts with the marker in the middle
  marker <- 0
  
  # first robot to pull is robot A
  current_robot <- "A"
  
  # play until the marker crosses 0.5 or -0.5
  while(abs(marker) < 0.5){
    pull <- runif(1, 0, 0.5)
    
    # movement depends on whether current robot is A or B
    marker <- ifelse(current_robot == "A", marker + pull, marker - pull)
    
    # switch robot for the next pull
    current_robot <- ifelse(current_robot == "A", "B", "A")
  }
  results[i] <- marker >= 0.5
}

# fraction of the time that robot A wins
mean(results)
```

In the first interpretation, the game is fair (and nothing needs to be done to make it more fair). In the second interpretation, the game is decidedly unfair, but could be made more fair by adjusting the starting position of the marker, or the strength with which robot B pulls.

#### Question 8

Uses for simulation studies include assessing the importance of assumptions, comparing different statistical methods, power calculations, and verifying the theoretical properties of a method (among others).

#### Question 9

* **Aims:** the goal of the simulation study
* **Data generation:** how the data were simulated
* **Estimand/target:** what we are estimating for each simulated dataset
* **Methods:** the methods we use for model fitting, estimation, etc.
* **Performance measures:** how we measure and compare the performance of our chosen methods

#### Question 10

The warning arises because we are trying to compare two vectors of different lengths, *and the length of the longer vector is not a multiple of the length of the shorter vector*. 

R can be counter-intuitive with how it compares vectors:

* If `x` and `y` have the same length, `x == y` will compare the corresponding elements
* If `x` and `y` have different lengths, then R will (try) to repeat the shorter vector until it has the same length as the longer vector. Thus, when the lengths don't divide, R gives us a warning

#### Question 11

The warning goes away because 10 is now a multiple of 2. But, the comparison doesn't make a huge amount of sense.

