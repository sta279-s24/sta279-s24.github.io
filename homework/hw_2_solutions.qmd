---
title: "Homework 2 Solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

### Probability simulation

#### Question 1

```{r}
set.seed(111)

n_people <- 100 # number of people in the theater
nsim <- 1000 # number of simulations to estimate probability
results <- rep(NA, nsim)
seats <- 1:n_people

for(i in 1:nsim){
  # vector to store which seats are taken
  # taken[i] is 0 when the seat is free
  taken <- rep(0, n_people)
  
  # first person randomly chooses a seat
  choice <- sample(seats, 1)
  taken[choice] <- 1
  
  # now go through everyone else (except the last person)
  for(j in 2:(n_people - 1)){
    
    # if the seat is free, take their seat. Otherwise,
    # randomly choose a seat from the ones available
    choice <- ifelse(taken[j] == 0, j, 
                     sample(seats[taken == 0], 1))
    taken[choice] <- 1
  }
  
  results[i] <- taken[n_people]
}

mean(results)
```

**Notes:**

* Make sure to use difference indices for the two `for` loops! Here I have used `i` and `j`
* In the inner for loop, I used `2:(n_people - 1)` to do `2, 3, ..., 99`. This is *different* from `2:n_people - 1`, which would give us `1, 2, ..., 99`.
* There are lots of other ways to code this question (e.g., you could use a counter to record the results, rather than a vector)
* It is crucial to treat the first person separately from the rest

#### Question 2

```{r}
# helper function so we can play the game for different values of a
# input: the number of players who will be looking for slips
# output: whether they all found their slips (TRUE) or not (FALSE)
play_game <- function(a){
  
  # randomly assign slips to boxes
  slips <- 1:a
  boxes <- sample(slips, a, replace=F)
  
  # store whether each player saw their slip
  # (could also use a counter here)
  player_results <- rep(NA, a)
  
  for(player in 1:a){
    # randomly choose a/2 boxes to open
    opened_boxes <- sample(1:a, a/2, replace = F)
    player_results[player] <- player %in% boxes[opened_boxes]
  }
  return(sum(player_results) == a)
}

a_values <- 2:20 # values of a to consider
a_probs <- rep(NA, length(a_values)) # results for each a
ngames <- 1000

for(i in 1:length(a_values)){
  game_results <- rep(NA, ngames)
  
  for(j in 1:ngames){
    game_results[j] <- play_game(a_values[i])
  }
  a_probs[i] <- mean(game_results)
}

plot(a_values, a_probs)
```

As `a` increases, the probability of winning the game (all players seeing their slips) generally decreases. However, notice that the probability is slightly higher for even values of `a` rather than odd values of `a`. This is because each player gets to look in `a/2` boxes, and R rounds that down to the nearest integer in the `sample` function. So, when `a=3`, each player gets to look in 1 box, but when `a=4`, each player gets to look in two boxes!

**Notes:**

* a plot is not required here, but is helpful for viewing the relationship as `a` changes
* writing a function is not required (you could just put the code in the inner `for` loop), but writing a function makes everything easier to read (and easier to modify in question 3!)
* As always, there are other ways you could code this. E.g., you could have the function output the *probability* for each `a`, rather than the results of a single game.

#### Question 3

All we have to modify is the `play_game` function here!

```{r}
# helper function so we can play the game for different values of a
# input: the number of players who will be looking for slips
# output: whether they all found/guessed their colors (TRUE) or not (FALSE)
play_game_q3 <- function(a){
  
  # randomly assign slips to boxes, and randomly color the slips
  slips <- 1:a
  boxes <- sample(slips, a, replace=F)
  slip_colors <- sample(c("red", "blue"), a, replace=T)
  player_results <- rep(NA, a)
  
  for(player in 1:a){
    
    # randomly choose which boxes to open
    opened_boxes <- sample(1:a, a/2, replace = F)
    
    # if the player sees their slip, they KNOW their color
    # otherwise, they take a guess!
    if(player %in% boxes[opened_boxes]){
      player_results[player] <- TRUE
    } else {
      random_guess <- sample(c("red", "blue"), 1)
      player_results[player] <- random_guess == slip_colors[player]
    }
  }
  return(sum(player_results) == a)
}

a_values <- 2:20 # values of a to consider
a_probs <- rep(NA, length(a_values)) # results for each a
ngames <- 1000

for(i in 1:length(a_values)){
  game_results <- rep(NA, ngames)
  
  for(j in 1:ngames){
    game_results[j] <- play_game(a_values[i])
  }
  a_probs[i] <- mean(game_results)
}

plot(a_values, a_probs)
```

#### Question 4

```{r}
huber <- function(x){
  return(ifelse(abs(x) <= 1, x^2, 2*abs(x) - 1))
}
```

#### Question 5

```{r}
huber(c(0.5, 1, 2))
```

#### Question 6

There is a typo in this question. The original question reads

$$\psi_a(x) = \begin{cases} x^2 & \text{if } |x| \leq a \\ 2|x| - 1 & \text{if } |x| > a  \end{cases}$$

Here is the code for that (incorrect) version:

```{r}
huber <- function(x, a=1){
  return(ifelse(abs(x) <= a, x^2, 2*abs(x) - 1))
}
```

The *correct* definition of $\psi_a(x)$ should be

$$\psi_a(x) = \begin{cases} x^2 & \text{if } |x| \leq a \\ 2a|x| - a^2 & \text{if } |x| > a  \end{cases}$$

Here is code for the correct version:

```{r}
huber <- function(x, a=1){
  return(ifelse(abs(x) <= a, x^2, 2*a*abs(x) - a^2))
}
```

(For this homework assignment, either is ok).

#### Questions 7 - 13

A clean way to write the code for these questions is to write a function (`assess_coverage`) which takes both the sample size `n` and the standard deviation function `noise_sd`. Then, use a nested `for` loop to iterate over both the sample sizes and the standard deviations.

First, let's write the function to calculate confidence interval coverage:

```{r}
# inputs: 
#   n: sample size
#   nsim: number of simulations
#   beta0: intercept
#   beta1: slope
#   level: confidence level (default 0.95, for a 95% CI)
#   noise_sd: a function that takes in a vector x, and returns
#             the standard deviation for each observation as a function of x
#
# output: confidence interval coverage
assess_coverage <- function(n, nsim, beta0, beta1, level = 0.95, noise_sd){
  results <- rep(NA, nsim)

  for(i in 1:nsim){
    # simulate the data
    x <- runif(n, min=0, max=1)
    noise <- rnorm(n, sd = noise_sd(x))
    y <- beta0 + beta1*x + noise
    
    # caclulate a CI and check if it contains beta1
    lm_mod <- lm(y ~ x)
    ci <- confint(lm_mod, "x", level = level)
    results[i] <- ci[1] < beta1 & ci[2] > beta1
  }
  return(mean(results))
}
```

Here, the argument `noise_sd` is a function that returns $\sigma(X_i)$. For $\sigma(X_i) = 1$, `noise_sd(x)` should return 1. For $\sigma(X_i) = X_i$, `noise_sd(x)` should return `x`. Etc.

Next, we need to iterate over the different sample sizes and standard deviations. You are not required to use `for` loops here (it is acceptable for you to run the simulation separately for each configuration in questions 8 -- 12, and manually enter the results into a table). In these solutions, though, I will show you how you could write the code more efficiently.

We will use nested `for` loops to iterate over both the sample sizes and standard deviations. (Remember to use different indices for the two loops!) I will also use an object called a *matrix* to store the results. A matrix has two indices (for the rows and columns); e.g. `results[1,2]` is the first row, second column. We will see more matrices later in the course.

```{r}
n_values <- c(10, 50, 1000)
sd_functions <- list(function(x){return(1)},
                     function(x){return(x)},
                     function(x){return(x^2)})

results <- matrix(NA, nrow=length(n_values), ncol = length(sd_functions))
for(i in 1:length(n_values)){
  for(j in 1:length(sd_functions)){
    results[i,j] <- assess_coverage(n_values[i], nsim=1000, 
                                    beta0 = 0.5, beta1 = 1, 
                                    noise_sd = sd_functions[[j]])
  }
}

results
```

Finally, we want to make the results table look nice! I will use the `kable` function from the `knitr` package here, which converts R output into Markdown for use in documents. I am adding the sample sizes as the initial column, then adding column names.

```{r}
knitr::kable(cbind(n_values, results),
             col.names = c("n", "$\\sigma(X_i) = 1$", 
                           "$\\sigma(X_i) = X_i$", 
                           "$\\sigma(X_i) = X_i^2$"))
```


