---
title: "Homework 2 Solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

### Probability simulation

#### Question 1

```{r}
set.seed(111)

n_people <- 100 # number of people in the theater
nsim <- 1000 # number of simulations to estimate probability
results <- rep(NA, nsim)
seats <- 1:n_people

for(i in 1:nsim){
  # vector to store which seats are taken
  # taken[i] is 0 when the seat is free
  taken <- rep(0, n_people)
  
  # first person randomly chooses a seat
  choice <- sample(seats, 1)
  taken[choice] <- 1
  
  # now go through everyone else (except the last person)
  for(j in 2:(n_people - 1)){
    
    # if the seat is free, take their seat. Otherwise,
    # randomly choose a seat from the ones available
    choice <- ifelse(taken[j] == 0, j, 
                     sample(seats[taken == 0], 1))
    taken[choice] <- 1
  }
  
  results[i] <- taken[n_people]
}

mean(results)
```

**Notes:**

* Make sure to use difference indices for the two `for` loops! Here I have used `i` and `j`
* In the inner for loop, I used `2:(n_people - 1)` to do `2, 3, ..., 99`. This is *different* from `2:n_people - 1`, which would give us `1, 2, ..., 99`.
* There are lots of other ways to code this question (e.g., you could use a counter to record the results, rather than a vector)
* It is crucial to treat the first person separately from the rest

#### Question 2

```{r}
# helper function so we can play the game for different values of a
# input: the number of players who will be looking for slips
# output: whether they all found their slips (TRUE) or not (FALSE)
play_game <- function(a){
  
  # randomly assign slips to boxes
  slips <- 1:a
  boxes <- sample(slips, a, replace=F)
  
  # store whether each player saw their slip
  # (could also use a counter here)
  player_results <- rep(NA, a)
  
  for(player in 1:a){
    # randomly choose a/2 boxes to open
    opened_boxes <- sample(1:a, a/2, replace = F)
    player_results[player] <- player %in% boxes[opened_boxes]
  }
  return(sum(player_results) == a)
}

a_values <- 2:20 # values of a to consider
a_probs <- rep(NA, length(a_values)) # results for each a
ngames <- 1000

for(i in 1:length(a_values)){
  game_results <- rep(NA, ngames)
  
  for(j in 1:ngames){
    game_results[j] <- play_game(a_values[i])
  }
  a_probs[i] <- mean(game_results)
}

plot(a_values, a_probs)
```

As `a` increases, the probability of winning the game (all players seeing their slips) generally decreases. However, notice that the probability is slightly higher for even values of `a` rather than odd values of `a`. This is because each player gets to look in `a/2` boxes, and R rounds that down to the nearest integer in the `sample` function. So, when `a=3`, each player gets to look in 1 box, but when `a=4`, each player gets to look in two boxes!

**Notes:**

* a plot is not required here, but is helpful for viewing the relationship as `a` changes
* writing a function is not required (you could just put the code in the inner `for` loop), but writing a function makes everything easier to read (and easier to modify in question 3!)
* As always, there are other ways you could code this. E.g., you could have the function output the *probability* for each `a`, rather than the results of a single game.

#### Question 3

All we have to modify is the `play_game` function here!

```{r}
# helper function so we can play the game for different values of a
# input: the number of players who will be looking for slips
# output: whether they all found/guessed their colors (TRUE) or not (FALSE)
play_game_q3 <- function(a){
  
  # randomly assign slips to boxes, and randomly color the slips
  slips <- 1:a
  boxes <- sample(slips, a, replace=F)
  slip_colors <- sample(c("red", "blue"), a, replace=T)
  player_results <- rep(NA, a)
  
  for(player in 1:a){
    
    # randomly choose which boxes to open
    opened_boxes <- sample(1:a, a/2, replace = F)
    
    # if the player sees their slip, they KNOW their color
    # otherwise, they take a guess!
    if(player %in% boxes[opened_boxes]){
      player_results[player] <- TRUE
    } else {
      random_guess <- sample(c("red", "blue"), 1)
      player_results[player] <- random_guess == slip_colors[player]
    }
  }
  return(sum(player_results) == a)
}

a_values <- 2:20 # values of a to consider
a_probs <- rep(NA, length(a_values)) # results for each a
ngames <- 1000

for(i in 1:length(a_values)){
  game_results <- rep(NA, ngames)
  
  for(j in 1:ngames){
    game_results[j] <- play_game_q3(a_values[i])
  }
  a_probs[i] <- mean(game_results)
}

plot(a_values, a_probs)
```

#### Question 4

```{r}
set.seed(711)
nsim <- 1000
n <- 100 # sample size
beta0 <- 0.5 # intercept
beta1 <- 0 # slope

pvals <- rep(NA, nsim)

for(i in 1:nsim){
  x <- runif(n, min=0, max=1)
  noise <- rnorm(n, mean=0, sd=1)
  y <- beta0 + beta1*x + noise
  
  lm_mod <- lm(y ~ x)
  pvals[i] <- summary(lm_mod)$coefficients[2,4]
}

mean(pvals < 0.05)
```

Indeed, we reject the null about 5% of the time.

#### Question 5

```{r}
set.seed(711)
nsim <- 1000
n <- 100 # sample size
beta0 <- 0.5 # intercept
beta1 <- 0 # slope

pvals <- rep(NA, nsim)

for(i in 1:nsim){
  x <- runif(n, min=0, max=1)
  noise <- rchisq(n, df=1)
  y <- beta0 + beta1*x + noise
  
  lm_mod <- lm(y ~ x)
  pvals[i] <- summary(lm_mod)$coefficients[2,4]
}

mean(pvals < 0.05)
```

The type I error rate is still around 5%.

#### Question 6

```{r}
set.seed(711)
nsim <- 1000
n <- 100 # sample size
beta0 <- 0.5 # intercept
beta1 <- 0.2 # slope

pvals <- rep(NA, nsim)

for(i in 1:nsim){
  x <- runif(n, min=0, max=1)
  noise <- rnorm(n, mean=0, sd=1)
  y <- beta0 + beta1*x + noise
  
  lm_mod <- lm(y ~ x)
  pvals[i] <- summary(lm_mod)$coefficients[2,4]
}

mean(pvals < 0.05)
```

Our power with $\beta_1 = 0.2$ is about 8%.

#### Question 7

```{r}
set.seed(711)
nsim <- 1000
n <- 100 # sample size
beta0 <- 0.5 # intercept
beta1 <- 1 # slope

pvals <- rep(NA, nsim)

for(i in 1:nsim){
  x <- runif(n, min=0, max=1)
  noise <- rnorm(n, mean=0, sd=1)
  y <- beta0 + beta1*x + noise
  
  lm_mod <- lm(y ~ x)
  pvals[i] <- summary(lm_mod)$coefficients[2,4]
}

mean(pvals < 0.05)
```

As $\beta_1$ moves further away from 0, the power to reject $H_0$ increases.