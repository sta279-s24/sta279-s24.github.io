---
title: "Homework 5 Solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

Total: 28 pts

**General grading notes:** 

* They will write code in many different ways. As long as it works, they can receive credit for the question. If it doesn't work, but they made a reasonable attempt (at least some of the code has the right idea) then they receive partial credit.
* If code is written particularly inefficiently, you don't need to take off points, but you can leave a comment on how to write it more simply

#### Commenting code (2 pts)

If they made a reasonable effort to comment code on at least some of the questions (particularly the robot battle), then they get the 2 pts for the assignment. Otherwise, they do not receive the 2 pts.

#### Naming (2 pts)

Check that they used reasonable variable names on the assignment. If the names are generally terrible (e.g., `blah1` and `blah2` instead of `robotA` and `robotB`), they lose these 2 pts.



#### Question 1 (3 pts)

```{python}
import numpy as np

# create x
x = np.linspace(0, 1, 11)

# for loop version
x_square = np.zeros(11)
for i in range(11):
  x_square[i] = x[i]**2

x_square

# "vectorized" version
x_square = x**2
x_square

# list comprehension version
x_square = [a**2 for a in x]
x_square
```

**Grading:** 1 pt for each iteration method (for loop, vectorized version, list comprehension). Each one needs to return $x^2$

#### Question 2 (2 pts)

```{python}
# create x
x = np.linspace(0, 2, 41)

# for loop version
x_square = np.zeros(11)
for i in range(11):
  x_square[i] = x[i]**2

x_square

# "vectorized" version
x_square = x**2
x_square

# list comprehension version
x_square = [a**2 for a in x]
x_square
```

**Grading:** They just need to correctly change the range to 0 to 2, by increments of 0.05.

#### Question 3 (5 pts)

There are two different ways you could approach the problem here (the wording of the problem is slightly ambiguous). *I am fine with either approach*. 

The simpler approach is to have the robots pull simultaneously, in which case the game is fair (each robot wins 50% of the time):

```{python}
np.random.seed(321)

nsim = 1000
results = np.zeros(nsim)

for i in range(nsim):
  marker = 0
  
  while -0.5 < marker < 0.5:
    robotA = np.random.uniform(0, 0.5)
    robotB = np.random.uniform(0, 0.5)
    marker += robotA - robotB
    
  results[i] = marker >= 0.5

np.mean(results)
```

The slightly more complicated approach is to have the robots take *turns* pulling, and update the marker each time. Now there is a distinct advantage to robot A for pulling first.

**Grading:** 

* Lose 2 pts if they don't repeat the simulation many times (for loop)
* Lose 2 pts if they don't have the robots pull until the marker crosses 0.5 or -0.5
* Lose 1 pt if the robot strengths aren't sampled from a uniform
* Lose 1 pt for minor errors

#### Question 4 (8 pts)

```{python}
np.random.seed(111)

n_people = 100 # number of people in the theater
nsim = 1000 # number of simulations to estimate probability
results = np.zeros(nsim)
seats = np.arange(n_people)

for i in range(nsim):
  taken = np.zeros(n_people)
  
  choice = np.random.choice(seats)
  taken[choice] = 1
  
  for j in range(1, n_people - 1):
    if taken[j] == 0:
      taken[j] = 1
    else:
      choice = np.random.choice(seats[taken == 0])
      taken[choice] = 1
  
  results[i] = taken[n_people-1] == 0

np.mean(results)
```

**Notes:**

* Make sure to use difference indices for the two `for` loops! Here I have used `i` and `j`
* There are lots of other ways to code this question (e.g., you could use a counter to record the results, rather than a vector)
* It is crucial to treat the first person separately from the rest

**Grading:** 

* 2 pts for correctly treating the first person differently than the others
* 2 pts for correct logic with persons 2 through 99: if their seat is available, take it, otherwise choose a random seat
* 1 pt for randomly choosing a seat from the *available* seats (e.g. `seats[taken == 0]`)
* 2 pts for correctly checking whether the final person gets their seat
* 1 pt for repeating the experiment many times to estimate a probability


#### Question 5 (3 pts)


```{python}
def huber(x, a=1):
  return np.where(abs(x) <= a, x**2, 2*a*abs(x) - a**2)
```

**Grading:** 

* 1 pt for updating the condition to be $|x| \leq a$
* 1 pt for including `a` as an argument for the function
* 1 pt for setting `a=1` as the default

#### Question 6 (3 pts)

```{python}
def leaky_relu(x, a=0):
  return np.where(x >= 0, x, a*x)
```

**Grading:** 

* 2 pts for the correct definition
* 1 pt for setting `a=1` as the default