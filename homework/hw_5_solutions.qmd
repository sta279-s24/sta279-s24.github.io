---
title: "Homework 5 Solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

#### Question 1

```{r, message=F, warning=F}
library(nycflights13)
library(tidyverse)
library(mdsr)

flights |>
  group_by(origin) |>
  summarize(N = n()) |>
  arrange(desc(N))
```


#### Question 2

```{r}
flights |>
  group_by(month) |>
  summarize(prop_cancelled = mean(is.na(dep_time))) |>
  arrange(desc(prop_cancelled))
```

#### Question 3

Two ways of approaching this question: either using `head`, or using `slice_max`:

```{r}
flights |>
  count(tailnum) |>
  arrange(desc(n)) |>
  head()
```

```{r}
flights |>
  count(tailnum) |>
  slice_max(order_by = n, 
            n = 5)
```

#### Question 4

```{r}
flights |>
  filter(tailnum == "N725MQ") |>
  mutate(week = week(time_hour)) |>
  group_by(week) |>
  summarize(count = n()) |>
  ggplot(aes(x = week, y = count)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  labs(x = "Week", y = "Number of trips")
```

#### Question 5

```{r}
flights |>
  group_by(carrier) |>
  summarize(mean_delay = mean(arr_delay, na.rm=T)) |>
  arrange(desc(mean_delay))
```

#### Question 6

We *cannot* disentangle bad carriers from bad airports.

```{r}
table(flights$origin, flights$carrier)
```

#### Question 7

```{r}
violations_summary <- Violations |>
  drop_na(zipcode, score, boro) |>
  filter(boro == "MANHATTAN") |>
  group_by(zipcode) |>
  summarize(med_score = median(score),
            N = n()) |>
  filter(N >= 50)
```

#### Question 8

```{r}
violations_summary |>
  ggplot(aes(x = N, y = med_score)) +
  geom_point() +
  theme_bw() +
  labs(x = "Number of inspections",
       y = "Median inspection score")
```

#### Question 9

```{python}
import pandas as pd

flights_py = r.flights

flights_py.groupby(by = 'carrier').agg({'arr_delay': 'mean'})
```

#### Question 10

```{r}
vio_py <- Violations |>
  mutate(score = as.numeric(score))
```


```{python}
vio_py = r.vio_py

vio_py.loc[vio_py['boro'] == "MANHATTAN"].dropna(
  subset = ['zipcode', 'score', 'boro']).groupby(by = 'zipcode').agg(
    {'score': 'median', 'zipcode': 'count'}).query('zipcode >= 50')
```


