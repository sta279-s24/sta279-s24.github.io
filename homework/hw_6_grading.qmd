---
title: "Homework 6 Solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

Total: 43 pts

**General grading notes:** 

* They will write code in many different ways. As long as it works, they can receive credit for the question. If it doesn't work, but they made a reasonable attempt (at least some of the code has the right idea) then they receive partial credit.
* If code is written particularly inefficiently, you don't need to take off points, but you can leave a comment on how to write it more simply

#### Naming (2 pts)

Check that they used reasonable variable names on the assignment. If the names are generally terrible (e.g., `blah1` and `blah2` instead of `robotA` and `robotB`), they lose these 2 pts.


#### Question 1 (4 pts)

```{r, message=F, warning=F}
library(Lahman)
library(tidyverse)

Teams |>
  filter(teamID == "CHN") |>
  select(yearID, HR, HRA) |>
  pivot_longer(-yearID,
               names_to = "team",
               values_to = "runs") |>
  mutate(team = ifelse(team == "HR", "Cubs", "Opponent")) |>
  ggplot(aes(x = yearID, y = runs, color = team)) +
  geom_point() +
  geom_line() +
  labs(x = "Year", y = "Runs", color = "Team") +
  theme_bw()
```

**Grading:** They don't have to use ggplot, but their output needs to look close to the plot on the assignment.

* 1 pt for year on x-axis
* 1 pt for runs on y-axis
* 1 pt for separate lines for cubs and opponent
* 1 pt for labeling (colors and axes)

#### Question 2 (5 pts)

```{r}
df1 <- data.frame(
  grp = c("A", "A", "B", "B"),
  sex = c("F", "M", "F", "M"),
  meanL = c(0.225, 0.47, 0.325, 0.547),
  sdL = c(0.106, 0.325, 0.106, 0.308),
  meanR = c(0.34, 0.57, 0.4, 0.647),
  sdR = c(0.0849, 0.325, 0.0707, 0.274)
)

df1 |>
  pivot_longer(-c(grp, sex),
               names_to = "stat", values_to = "value") |>
  pivot_wider(id_cols = grp,
              names_from = c(sex, stat),
              names_sep = ".",
              values_from = value)
```

**Grading:**

* 3 pts for the right dimensions (2 rows, 9 columns) and columns
* 1 pt for the right column names (e.g., `F.meanL`, *not* `F_meanL` or `meanL.F`, etc.)
* 1 pt for the correct ordering


#### Question 3 (2 pts)

```{r}
df2 <- data.frame(id = rep(c(1, 2, 3), 2),
                  group = rep(c("T", "C"), each=3),
                  vals = c(4, 6, 8, 5, 6, 10))

Treat <- filter(df2, group == "T")
Control <- filter(df2, group == "C")
all <- mutate(Treat, diff = Treat$vals - Control$vals)
all
```

If the rows for the treatments and controls aren't in the same order, then `Treat$vals - Control$vals` won't be subtracting values for the same individuals. If there are missing values, then `Treat$vals` and `Control$vals` could have different lengths, which will cause issues.

**Grading:** Answers may vary. 2 pts for a reasonable, correct answer that lists two possible issues.

#### Question 4 (3 pts)

```{r}
df2 |>
  group_by(id) |>
  summarize(diff = vals[group == "T"] - vals[group == "C"])
```

**Grading:** 1 pt for correct output, 2 pts for using `group_by` and `summarize`


#### Question 5 (3 pts)

```{r}
df2 |>
  pivot_wider(id_cols = id,
              names_from = group,
              values_from = vals) |>
  mutate(diff = T - C)
```

**Grading:** 1 pt for correct output, 2 pts for using `pivot_wider` and `mutate`

```{r, eval=F}
library(tidyverse)
library(mdsr)
library(DBI)

db <- dbConnect_scidb("airlines")

query <- "
  SHOW TABLES;
"
dbGetQuery(db, query)
```


#### Question 6 (6 pts)

```
SELECT 
  dest, SUM(1) as N
FROM flights
WHERE origin = 'ORD' AND year = 2014
GROUP BY dest
ORDER BY N DESC
LIMIT 0, 5;
```

**Grading:** 

* 1 pt for counting the number of flights
* 1 pt for grouping by destination
* 1 pt for displaying both the count and the destination in the output
* 1 pt for descending order
* 2 pts for choosing ORD and 2014

#### Question 7 (5 pts)

```
SELECT 
  dest, AVG(arr_delay) as mean_arr_delay
FROM flights
WHERE year = 2014
GROUP BY dest
ORDER BY mean_arr_delay DESC
LIMIT 0, 5;
```

**Grading:** 

* 1 pt for calculating mean arrival delay
* 1 pt for grouping by destination
* 1 pt for displaying both the delay and the destination in the output
* 1 pt for descending order
* 1 pts for choosing 2014

#### Question 8 (7 pts)

```
SELECT 
  name, AVG(arr_delay) as mean_arr_delay
FROM flights
JOIN airports ON flights.dest = airports.faa
WHERE year = 2014
GROUP BY dest
ORDER BY mean_arr_delay DESC
LIMIT 0, 5;
```

**Grading:** 

* 1 pt for calculating mean arrival delay
* 1 pt for grouping by destination
* 1 pt for displaying both the delay and the destination in the output
* 1 pt for descending order
* 1 pts for choosing 2010
* 2 pts for joining on dest = faa

#### Question 9 (6 pts)

```
SELECT 
  SUM(cancelled) as N,
  SUM(cancelled)/SUM(1) AS prop_cancelled
FROM flights
WHERE year = 2014 AND 
  ((origin = 'JFK' AND dest = 'SFO') OR 
  (origin = 'SFO' AND dest = 'JFK'))
LIMIT 0, 5;
```

**Grading:** 

* 1 pt for calculating number of cancelled flights
* 1 pt for calculating proportion of cancelled flights
* 4 pt for year = 2010, AND correctly identifying flights between JFK and SFO (either JFK is origin and SFO is dest, or JFK is dest and SFO is origin)