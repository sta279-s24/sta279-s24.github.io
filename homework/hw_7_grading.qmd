---
title: "Homework 7 solutions"
format: 
  html:
    embed-resources: true
editor: source
author: "Ciaran Evans"
---

Total: 44 pts

1. (2 pts)

```{r}
months <- tolower(lubridate::month(c(12, 1:7), label=T, abbr=F))
months
```

**Grading:** 2 pts for creating the vector (whichever way they choose)

2. (1 pt)

```{r}
urls <- paste0("https://www.basketball-reference.com/leagues/NBA_2021_games-",
               months, ".html")
```

**Grading:** 1 pt for running the code

3. (6 pts)

```{r}
library(rvest)
library(tidyverse)

df_list <- list()

for(i in 1:length(urls)){
  df_list[[i]] <- read_html(urls[i]) |>
    html_element("table") |>
    html_table(header = TRUE, fill = TRUE)
}

df_list[[1]]
df_list[[2]]
```

**Grading:** 

* 2 pts for iterating over the urls
* 2 pts for correctly scraping each table
* 2 pts for storing the data frames in a list

4. (1 pt)

```{r, message=F, warning=F}
library(data.table)

nba <- rbindlist(df_list)
```

**Grading:** 1 pt for running code

5. (6 pts)

```{r, message=F, warning=F}
colnames(nba) <- c("date", "start", "visitor", "visitor_pts", "home", "home_pts",
                   "v1", "v2", "attend", "arena", "notes")

nba <- nba |>
  mutate(attend = as.numeric(gsub(",", "", attend)))

nba |>
  mutate(diff = home_pts - visitor_pts) |>
  ggplot(aes(x = attend, y = diff)) +
  geom_point() +
  geom_smooth() +
  theme_bw() +
  labs(x = "Attendance", y = "Home pts - away pts")
```

**Grading:**

* 2 pts for calculating home - away pts (or away - home)
* 2 pts for plotting difference in pts against attendance
* 2 pts for axis labels (something reasonable)

6. (7 pts)

```{r}
nba |>
  mutate(month = tolower(lubridate::month(lubridate::mdy(date), 
                                          label=T, abbr=F))) |>
  mutate(month = factor(month, levels = months)) |>
  group_by(month) |>
  summarize(frac_0 = mean(attend == 0, na.rm=T)) |>
  ggplot(aes(x = month, y = frac_0)) +
  geom_point() +
  theme_bw() +
  labs(x = "Month", y = "Fraction of games with 0 attendees")
```

**Grading:** 

* 4 pts for correctly aggregating over reasonable time periods (months, weeks, gamedays, etc.). They lose these points if there is no aggregation
* 2 pts for plotting fraction of 0s against time
* 1 pt for correctly ordering the time axis


7. (2 pts)

```{r}
table_list <- read_html("https://en.wikipedia.org/wiki/The_Great_British_Bake_Off_(series_2)") |>
  html_elements("table.wikitable.sortable") |>
  html_table()
```

**Grading:** 2 pts for identifying the correct tables (the specific selector they use may vary somewhat)

8. (2 pts)

```{r}
table_list[[1]]
```

12 contestants

**Grading:** 2 pts for correct answer

9. (2 pts)


```{r}
table_list <- read_html("https://en.wikipedia.org/wiki/The_Great_British_Bake_Off_(series_5)") |>
  html_elements("table.wikitable.sortable") |>
  html_table()

table_list[[1]]
```

There is a footnote in the column name

**Grading:** 2 pts for correct answer

10. (3 pts)

```{r}
table_list <- read_html("https://en.wikipedia.org/wiki/The_Great_British_Bake_Off_(series_5)") |>
  html_elements("table.wikitable.sortable") |>
  html_table()

table_list[[1]] |>
  rename(baker = starts_with("Baker"))
```

**Grading:** 3 pts for renaming the column using `rename` and `starts_with`. Lose 1 pt if they rename it, but use a different method

11. (6 pts)

```{r}
urls <- paste0("https://en.wikipedia.org/wiki/The_Great_British_Bake_Off_(series_", 
               2:13, ")")
contestants <- list()
for(i in 2:13){
  contestants[[i-1]] <- read_html(urls[i-1]) |>
    html_element("table.wikitable.sortable") |>
    html_table() |>
    rename(baker = starts_with("Baker"),
           age = starts_with("Age"),
           occupation = starts_with("occupation"),
           hometown = starts_with("hometown")) |>
    select(baker, age, occupation, hometown) |>
    mutate(series = i)
}

contestants <- rbindlist(contestants)
head(contestants)
```

**Grading:** 2 pts for iterating over series, 3 pts for correct columns, 1 pt for series column


12. (3 pts)

```{r}
contestants |>
  group_by(series) |>
  count()
```

**Grading:** 3 pts for correct answer

13. (3 pts)

```{r}
contestants |>
  group_by(series) |>
  mutate(mean_age = mean(age)) |>
  ggplot(aes(x = series, y = mean_age)) +
  geom_point()
```

**Grading:** 3 pts for a reasonable plot or summary statistics


