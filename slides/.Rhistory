x <- runif(n, min=0, max=1)
noise <- rnorm(n, mean=0, sd=1)
y <- beta0 + beta1*x + noise
plot(x,y)
n <- 100
beta0 <- 0.5
beta1 <- 1
x <- runif(n, min=0, max=1)
noise <- rnorm(n, mean=0, sd=x)
y <- beta0 + beta1*x + noise
plot(x,y)
n <- 100
beta0 <- 0.5
beta1 <- 1
x <- runif(n, min=0, max=1)
noise <- rnorm(n, mean=0, sd=x^2)
y <- beta0 + beta1*x + noise
plot(x,y)
huber <- function(x){
huber_val <- ifelse(abs(x) <= 1, x^2, 2*abs(x) - 1)
return(huber_val)
}
huber(1)
huber(3)
huber(4)
huber(c(1, 3, 4))
huber(c(1, 2, 3, 4, 5))
huber(0.05)
huber(c(0.5, 1, 2))
library(Stat2Data)
data("Kershaw")
Kershaw$Result
Kershaw$EndSpeed
log_reg <- glm(Result ~ EndSpeed, family = binomial, data = Kershaw)
log_reg
summary(log_reg)
log_reg$y - log_reg$fitted.values
data.frame(fitted = log_reg$fitted.values,
residuals = log_reg$y - log_reg$fitted.values) %>%
ggplot(aes(x = fitted, y = residuals)) +
geom_abline(slope = 0, intercept = 0, color = "blue") +
geom_point() +
labs(x = "Fitted values", y = "Residuals") +
theme_bw()
library(tidyverse)
data.frame(fitted = log_reg$fitted.values,
residuals = log_reg$y - log_reg$fitted.values) |>
ggplot(aes(x = fitted, y = residuals)) +
geom_abline(slope = 0, intercept = 0, color = "blue") +
geom_point() +
labs(x = "Fitted values", y = "Residuals") +
theme_bw()
qnorm
?qnorm
yhat <- log_reg$fitted.values
y <- log_reg$y
u <- ifelse(y == 1, runif(1, 1-yhat, 1),
runif(1, 0, 1-yhat))
u
yhat <- log_reg$fitted.values
y <- log_reg$y
u <- ifelse(y == 1, runif(length(y), 1-yhat, 1),
runif(length(y), 0, 1-yhat))
length(u)
u
plot(y, u)
hist(u[y==0])
hist(u[y==1])
hist(yhat)
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
taken[100]
results <- rep(NA, 1000)
for(j in 1:1000){
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
if(taken[i] == 0){
taken[i] <- 1
} else {
choice <- sample(seats[taken == 0], 1)
taken[choice] <- 1
}
}
results[j] <- taken[100]
}
mean(results)
results <- rep(NA, 1000)
for(j in 1:1000){
seats <- 1:100
taken <- rep(0, 100)
# first person randomly chooses a seat
choice <- sample(seats, 1)
taken[choice] <- 1
for(i in 2:99){
choice <- ifelse(taken[i] == 0, i,
sample(seats[taken == 0], 1))
taken[choice] <- 1
# if(taken[i] == 0){
#   taken[i] <- 1
# } else {
#   choice <- sample(seats[taken == 0], 1)
#   taken[choice] <- 1
# }
}
results[j] <- taken[100]
}
mean(results)
boxes <- sample(1:a, a, replace=F)
# HW 3
a <- 20
boxes <- sample(1:a, a, replace=F)
boxes
# HW 3
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
# HW 3
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
i <- 1
boxes[1]
marker <- i
marker <- i
for(j in 1:5){
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
print(marker)
}
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker])
if(boxes[marker] == i){
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
i <- 2
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
# HW 3
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
for(i in 1:a){
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
}
seen
# HW 3
a <- 20
boxes <- sample(1:a, a, replace=F)
seen <- rep(0, a)
boxes
i <- 1
marker <- i
for(j in 1:5){
print(paste(marker, boxes[marker]))
if(boxes[marker] == i){
seen[i] <- 1
}
marker <- boxes[marker]
}
boxes
quant_resid <- function(mod){
yhat <- log_reg$fitted.values
y <- log_reg$y
u <- ifelse(y == 1, runif(length(y), 1-yhat, 1),
runif(length(y), 0, 1-yhat))
return(qnorm(u))
}
quant_resid_plot <- function(mod){
data.frame(fitted = mod$fitted.values,
residuals = quant_resid(mod)) |>
ggplot(aes(x = fitted, y = residuals)) +
geom_abline(slope = 0, intercept = 0, color = "blue") +
geom_point() +
labs(x = "Fitted values", y = "Residuals") +
theme_bw()
}
library(tidyverse)
library(Stat2Data)
data("Kershaw")
log_reg <- glm(Result ~ EndSpeed, family = binomial, data = Kershaw)
quant_resid_plot(log_reg)
reticulate::repl_python()
len(c(0, 1, 2))
length(c(0, 1, 2))
reticulate::repl_python()
c(1, 2, 3)[1]
c(1, 2, 3)[1.0]
c(1, 2, 3)[1.5]
reticulate::repl_python()
